# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2018-10-01 19:48
from __future__ import unicode_literals

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('reference', '0020_domain_changed'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('base', '0332_auto_20180816_1540'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='address_name_help_text', max_length=255, null=True, verbose_name='Name')),
                ('address', models.TextField(blank=True, default='', verbose_name='address')),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='postal_code')),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='city')),
                ('city_french', models.CharField(blank=True, max_length=255, null=True, verbose_name='city_french')),
                ('city_english', models.CharField(blank=True, max_length=255, null=True, verbose_name='city_english')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='reference.Country', verbose_name='country')),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, choices=[('mr', 'mister'), ('mme', 'madame')], max_length=50, null=True, verbose_name='contact_title')),
                ('last_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='last_name')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='first_name')),
                ('society', models.CharField(blank=True, max_length=255, null=True, verbose_name='society')),
                ('function', models.CharField(blank=True, max_length=255, null=True, verbose_name='function')),
                ('phone', models.CharField(blank=True, max_length=255, null=True, verbose_name='phone')),
                ('mobile_phone', models.CharField(blank=True, max_length=255, null=True, verbose_name='mobile_phone')),
                ('fax', models.CharField(blank=True, max_length=255, null=True, verbose_name='fax')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email')),
                ('comment', models.TextField(blank=True, default='', verbose_name='comment')),
            ],
        ),
        migrations.CreateModel(
            name='ContactType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ('value',),
            },
        ),
        migrations.CreateModel(
            name='Financing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('url', models.URLField(verbose_name='url')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.AcademicYear', verbose_name='academic_year')),
                ('countries', models.ManyToManyField(to='reference.Country', verbose_name='countries')),
            ],
            options={
                'ordering': ('academic_year__year',),
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('file', models.FileField(blank=True, help_text='media_file_or_url', null=True, upload_to='medias/', verbose_name='file')),
                ('url', models.URLField(blank=True, help_text='media_file_or_url', null=True, verbose_name='url')),
                ('visibility', models.CharField(choices=[('public', 'visibility_public'), ('staff', 'visibility_staff'), ('staff_student', 'visibility_staff_student')], max_length=50, verbose_name='visibility')),
                ('author', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='author')),
            ],
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, help_text='to_synchronize_with_epc', max_length=255, null=True, unique=True, verbose_name='external_id')),
                ('changed', models.DateField(auto_now=True, verbose_name='changed')),
                ('is_valid', models.BooleanField(default=False, verbose_name='is_valid')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('is_ies', models.BooleanField(default=False, verbose_name='is_ies')),
                ('partner_code', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='partner_code')),
                ('pic_code', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='pic_code')),
                ('erasmus_code', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='erasmus_code')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='partner_start_date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='partner_end_date')),
                ('website', models.URLField(verbose_name='website')),
                ('email', models.EmailField(blank=True, help_text='mandatory_if_not_pic_ies', max_length=254, null=True, verbose_name='email')),
                ('phone', models.CharField(blank=True, help_text='mandatory_if_not_pic_ies', max_length=255, null=True, verbose_name='phone')),
                ('is_nonprofit', models.NullBooleanField(verbose_name='is_nonprofit')),
                ('is_public', models.NullBooleanField(verbose_name='is_public')),
                ('contact_type', models.CharField(blank=True, choices=[('EPLUS-EDU-HEI', 'Higher education institution (tertiary level)'), ('EPLUS-EDU-GEN-PRE', 'School/Institute/Educational centre – General education (pre-primary level)'), ('EPLUS-EDU-GEN-PRI', 'School/Institute/Educational centre – General education (primary level)'), ('EPLUS-EDU-GEN-SEC', 'School/Institute/Educational centre – General education (secondary level)'), ('EPLUS-EDU-VOC-SEC', 'School/Institute/Educational centre – Vocational Training (secondary level)'), ('EPLUS-EDU-VOC-TER', 'School/Institute/Educational centre – Vocational Training (tertiary level)'), ('EPLUS-EDU-ADULT', 'School/Institute/Educational centre – Adult education'), ('EPLUS-BODY-PUB-NAT', 'National Public body'), ('EPLUS-BODY-PUB-REG', 'Regional Public body'), ('EPLUS-BODY-PUB-LOC', 'Local Public body'), ('EPLUS-ENT-SME', 'Small and medium sized enterprise'), ('EPLUS-ENT-LARGE', 'Large enterprise'), ('EPLUS-NGO', 'Non-governmental organisation/association/social enterprise'), ('EPLUS-FOUND', 'Foundation'), ('EPLUS-SOCIAL', 'Social partner or other representative of working life (chambers of commerce, trade union, trade association)'), ('EPLUS-RES', 'Research Institute/Centre'), ('EPLUS-YOUTH-COUNCIL', 'National Youth Council'), ('EPLUS-ENGO', 'European NGO'), ('EPLUS-NET-EU', 'EU-wide network'), ('EPLUS-YOUTH-GROUP', 'Group of young people active in youth work'), ('EPLUS-EURO-GROUP-COOP', 'European grouping of territorial cooperation'), ('EPLUS-BODY-ACCRED', 'Accreditation, _(certification or qualification body'), ('EPLUS-BODY-CONS', 'Counsellzing body'), ('EPLUS-INTER', 'International organisation under public law'), ('EPLUS-SPORT-PARTIAL', 'Organisation or association representing (parts of) the sport sector'), ('EPLUS-SPORT-FED', 'Sport federation'), ('EPLUS-SPORT-LEAGUE', 'Sport league'), ('EPLUS-SPORT-CLUB', 'Sport club'), ('OTH', 'Other')], help_text='mandatory_if_not_pic_ies', max_length=255, null=True, verbose_name='contact_type')),
                ('use_egracons', models.BooleanField(default=False, verbose_name='use_egracons')),
                ('comment', models.TextField(blank=True, default='', verbose_name='comment')),
                ('created', models.DateField(auto_now_add=True, verbose_name='created')),
                ('author', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='author')),
                ('contact_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='partners', to='partnership.Address', verbose_name='address')),
                ('medias', models.ManyToManyField(blank=True, related_name='_partner_medias_+', to='partnership.Media', verbose_name='medias')),
                ('now_known_as', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='formely_known_as', to='partnership.Partner', verbose_name='now_known_as')),
            ],
            options={
                'ordering': ('-created',),
                'permissions': (('can_access_partners', 'can_access_partners'),),
            },
        ),
        migrations.CreateModel(
            name='PartnerEntity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('comment', models.TextField(blank=True, default='', verbose_name='comment')),
                ('created', models.DateField(auto_now_add=True, verbose_name='created')),
                ('modified', models.DateField(auto_now=True, verbose_name='modified')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='partnership.Address', verbose_name='address')),
                ('author', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='author')),
                ('contact_in', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='partnership.Contact', verbose_name='contact_in')),
                ('contact_out', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='partnership.Contact', verbose_name='contact_out')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='childs', to='partnership.PartnerEntity', verbose_name='parent_entity')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='partnership.Partner', verbose_name='partner')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Partnership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='start_date')),
                ('comment', models.TextField(blank=True, default='', verbose_name='comment')),
                ('created', models.DateField(auto_now_add=True, verbose_name='created')),
                ('modified', models.DateField(auto_now=True, verbose_name='modified')),
                ('author', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='author')),
                ('contacts', models.ManyToManyField(blank=True, related_name='_partnership_contacts_+', to='partnership.Contact', verbose_name='contacts')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='partnerships', to='partnership.Partner', verbose_name='partner')),
                ('partner_entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='partnerships', to='partnership.PartnerEntity', verbose_name='partner_entity')),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='partnerships_supervisor', to='base.Person', verbose_name='partnership_supervisor')),
            ],
            options={
                'ordering': ('-created',),
                'permissions': (('can_access_partners', 'can_access_partnerships'),),
            },
        ),
        migrations.CreateModel(
            name='PartnershipAgreement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('waiting', 'status_waiting'), ('validated', 'status_validated'), ('refused', 'status_refused')], default='waiting', max_length=10, verbose_name='status')),
                ('eligible', models.BooleanField(default=False, verbose_name='eligible')),
                ('comment', models.TextField(blank=True, default='', verbose_name='comment')),
                ('end_academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='base.AcademicYear', verbose_name='end_academic_year')),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='partnership.Media', verbose_name='media')),
                ('partnership', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='agreements', to='partnership.Partnership', verbose_name='partnership')),
                ('start_academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='base.AcademicYear', verbose_name='start_academic_year')),
            ],
            options={
                'verbose_name': 'financing',
                'ordering': ['-start_academic_year__start_date'],
            },
        ),
        migrations.CreateModel(
            name='PartnershipConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('partnership_creation_max_date_day', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31)], default=31, verbose_name='partnership_creation_max_date_day')),
                ('partnership_creation_max_date_month', models.IntegerField(choices=[(1, 'january'), (2, 'february'), (3, 'march'), (4, 'april'), (5, 'may'), (6, 'june'), (7, 'july'), (8, 'august'), (9, 'september'), (10, 'october'), (11, 'november'), (12, 'december')], default=12, verbose_name='partnership_creation_max_date_month')),
                ('partnership_update_max_date_day', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31)], default=1, verbose_name='partnership_update_max_date_day')),
                ('partnership_update_max_date_month', models.IntegerField(choices=[(1, 'january'), (2, 'february'), (3, 'march'), (4, 'april'), (5, 'may'), (6, 'june'), (7, 'july'), (8, 'august'), (9, 'september'), (10, 'october'), (11, 'november'), (12, 'december')], default=3, verbose_name='partnership_update_max_date_month')),
            ],
        ),
        migrations.CreateModel(
            name='PartnershipTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ('value',),
            },
        ),
        migrations.CreateModel(
            name='PartnershipYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('education_field', models.CharField(choices=[('0110', '0110 - Education, not further defined'), ('0111', '0111 - Education science'), ('0112', '0112 - Training for pre-school teachers'), ('0113', '0113 - Teacher training without subject specialization'), ('0114', '0114 - Teacher training with subject specialization'), ('0119', '0119 - Education, not elsewhere classified'), ('0188', '0188 - Education, inter-disciplinary programmes'), ('0210', '0210 - Arts, not further defined'), ('0211', '0211 - Audio-visual techniques and media production'), ('0212', '0212 - Fashion, interior and industrial design'), ('0213', '0213 - Fine arts'), ('0214', '0214 - Handicrafts'), ('0215', '0215 - Music and performing arts'), ('0219', '0219 - Arts, not elsewhere classified'), ('0220', '0220 - Humanities (except languages), not further defined'), ('0221', '0221 - Religion and theology'), ('0222', '0222 - History and archaeology'), ('0223', '0223 - Philosophy and ethics'), ('0229', '0229 - Humanities (except languages), not elsewhere classified'), ('0230', '0230 - Languages, not further defined'), ('0231', '0231 - Language acquisition'), ('0232', '0232 - Literature and linguistics'), ('0239', '0239 - Languages, not elsewhere classified'), ('0288', '0288 - Arts and humanities, inter-disciplinary programmes'), ('0310', '0310 - Social and behavioural sciences, not further defined'), ('0311', '0311 - Economics'), ('0312', '0312 - Political sciences and civics'), ('0313', '0313 - Psychology'), ('0314', '0314 - Sociology and cultural studies'), ('0319', '0319 - Social and behavioural sciences, not elsewhere classified'), ('0320', '0320 - Journalism and information, not further defined'), ('0321', '0321 - Journalism and reporting'), ('0322', '0322 - Library, information and archival studies'), ('0329', '0329 - Journalism and information, not elsewhere classified'), ('0388', '0388 - Social sciences, journalism and information, inter-disciplinary programmes'), ('0410', '0410 - Business and administration, not further defined'), ('0411', '0411 - Accounting and taxation'), ('0412', '0412 - Finance, banking and insurance'), ('0413', '0413 - Management and administration'), ('0414', '0414 - Marketing and advertising'), ('0415', '0415 - Secretarial and office work'), ('0416', '0416 - Wholesale and retail sales'), ('0417', '0417 - Work skills'), ('0419', '0419 - Business and administration, not elsewhere classified'), ('0421', '0421 - Law'), ('0429', '0429 - Law, not elsewhere classified'), ('0488', '0488 - Business, administration and law, inter-disciplinary programmes'), ('0510', '0510 - Biological and related sciences, not further defined'), ('0511', '0511 - Biology'), ('0512', '0512 - Biochemistry'), ('0519', '0519 - Biological and related sciences, not elsewhere classifed'), ('0520', '0520 - Environment, not further defined'), ('0521', '0521 - Environmental sciences'), ('0522', '0522 - Natural environments and wildlife'), ('0529', '0529 - Environment, not elsewhere classified'), ('0530', '0530 - Physical sciences, not further defined'), ('0531', '0531 - Chemistry'), ('0532', '0532 - Earth sciences'), ('0533', '0533 - Physics'), ('0539', '0539 - Physical sciences, not elsewhere classified'), ('0540', '0540 - Mathematics and statistics, not further defined'), ('0541', '0541 - Mathematics'), ('0542', '0542 - Statistics'), ('0549', '0549 - Mathematics and statistics, not elsewhere classified'), ('0588', '0588 - Natural sciences, mathematics and statistics, inter-disciplinary programmes'), ('0610', '0610 - Information and Communication Technologies (ICTs), not further defined'), ('0611', '0611 - Computer use'), ('0612', '0612 - Database and network design and administration'), ('0613', '0613 - Software and applications development and analysis'), ('0619', '0619 - Information and Communication Technologies (ICTs), not elsewhere classified'), ('0688', '0688 - Information and Communication Technologies (ICTs), inter-disciplinary programmes'), ('0710', '0710 - Engineering and engineering trades, not further defined'), ('0711', '0711 - Chemical engineering and processes'), ('0712', '0712 - Environmental protection technology'), ('0713', '0713 - Electricity and energy'), ('0714', '0714 - Electronics and automation'), ('0715', '0715 - Mechanics and metal trades'), ('0716', '0716 - Motor vehicles, ships and aircraft'), ('0719', '0719 - Engineering and engineering trades, not elsewhere classified'), ('0720', '0720 - Manufacturing and processing, not further defined'), ('0721', '0721 - Food processing'), ('0722', '0722 - Materials (glass, paper, plastic and wood)'), ('0723', '0723 - Textiles (clothes, footwear and leather)'), ('0724', '0724 - Mining and extraction'), ('0729', '0729 - Manufacturing and processing, not elsewhere classified'), ('0730', '0730 - Architecture and construction, not further defined'), ('0731', '0731 - Architecture and town planning'), ('0732', '0732 - Building and civil engineering'), ('0739', '0739 - Architecture and construction, not elsewhere classified'), ('0788', '0788 - Engineering, manufacturing and construction, inter-disciplinary programmes'), ('0810', '0810 - Agriculture, not further defined'), ('0811', '0811 - Crop and livestock production'), ('0812', '0812 - Horticulture'), ('0819', '0819 - Agriculture, not elsewhere classified'), ('0821', '0821 - Forestry'), ('0829', '0829 - Forestry, not elsewhere classified'), ('0831', '0831 - Fisheries'), ('0839', '0839 - Fisheries, not elsewhere classified'), ('0841', '0841 - Veterinary'), ('0849', '0849 - Veterinary, not elsewhere classified'), ('0888', '0888 - Agriculture, forestry, fisheries, veterinary, inter-disciplinary programmes'), ('0910', '0910 - Health, not further defined'), ('0911', '0911 - Dental studies'), ('0912', '0912 - Medicine'), ('0913', '0913 - Nursing and midwifery'), ('0914', '0914 - Medical diagnostic and treatment technology'), ('0915', '0915 - Therapy and rehabilitation'), ('0916', '0916 - Pharmacy'), ('0917', '0917 - Traditional and complementary medicine and therapy'), ('0919', '0919 - Health, not elsewhere classified'), ('0920', '0920 - Welfare, not further defined'), ('0921', '0921 - Care of the elderly and of disabled adults'), ('0922', '0922 - Child care and youth services'), ('0923', '0923 - Social work and counselling'), ('0929', '0929 - Welfare, not elsewhere classified'), ('0988', '0988 - Health and Welfare, inter-disciplinary programmes'), ('1010', '1010 - Personal services, not further defined'), ('1011', '1011 - Domestic services'), ('1012', '1012 - Hair and beauty services'), ('1013', '1013 - Hotel, restaurants and catering'), ('1014', '1014 - Sports'), ('1015', '1015 - Travel, tourism and leisure'), ('1019', '1019 - Personal services, not elsewhere classified'), ('1020', '1020 - Hygiene and occupational health services, not further defined'), ('1021', '1021 - Community sanitation'), ('1022', '1022 - Occupational health and safety'), ('1029', '1029 - Hygiene and occupational health services, not elsewhere classified'), ('1030', '1030 - Security services, not further defined'), ('1031', '1031 - Military and defence'), ('1032', '1032 - Protection of persons and property'), ('1039', '1039 - Security services, not elsewhere classified'), ('1041', '1041 - Transport services'), ('1049', '1049 - Transport services, not elsewhere classified'), ('1088', '1088 - Services, inter-disciplinary programmes')], max_length=255, verbose_name='education_field')),
                ('education_level', models.CharField(blank=True, choices=[('ISCED-5', 'Short cycle within the first cycle / Short-cycle tertiary education (EQF-5)'), ('ISCED-6', 'First cycle / Bachelor’s or equivalent level (EQF-6)'), ('ISCED-7', 'Second cycle / Master’s or equivalent level (EQF-7)'), ('ISCED-8', 'Third cycle / Doctoral or equivalent level (EQF-8)'), ('ISCED-9', 'Not elsewhere classified')], max_length=255, null=True, verbose_name='education_level')),
                ('is_sms', models.BooleanField(default=False, verbose_name='is_sms')),
                ('is_smp', models.BooleanField(default=False, verbose_name='is_smp')),
                ('is_sta', models.BooleanField(default=False, verbose_name='is_sta')),
                ('is_stt', models.BooleanField(default=False, verbose_name='is_stt')),
                ('partnership_type', models.CharField(choices=[('intention', 'Déclaration d’intention'), ('cadre', 'Accord-cadre'), ('specifique', 'Accord spécifique'), ('codiplomation', 'Accord de co-diplômation'), ('cotutelle', 'Accord de co-tutelle'), ('mobility', 'Partenariat de mobilité'), ('fond_appuie', 'Projet Fonds d’appuie à l’internationnalisation'), ('autre', 'Autre')], max_length=255, verbose_name='partnership_type')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='base.AcademicYear', verbose_name='academic_year')),
                ('partnership', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='years', to='partnership.Partnership', verbose_name='partnership')),
            ],
            options={
                'verbose_name': 'partnership_year',
                'ordering': ('academic_year__year',),
            },
        ),
        migrations.CreateModel(
            name='PartnerTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ('value',),
            },
        ),
        migrations.CreateModel(
            name='PartnerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ('value',),
            },
        ),
        migrations.CreateModel(
            name='UCLManagementEntity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_in_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email')),
                ('contact_in_url', models.URLField(blank=True, null=True, verbose_name='portal')),
                ('contact_out_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email')),
                ('contact_out_url', models.URLField(blank=True, null=True, verbose_name='portal')),
                ('academic_responsible', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Person', verbose_name='academic_responsible')),
                ('administrative_responsible', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Person', verbose_name='administrative_responsible')),
                ('contact_in_person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Person', verbose_name='name')),
                ('contact_out_person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Person', verbose_name='name')),
                ('entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Entity', verbose_name='entity')),
                ('faculty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Entity', verbose_name='faculty')),
            ],
        ),
        migrations.AddField(
            model_name='partnership',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='partnerships', to='partnership.PartnershipTag', verbose_name='tags'),
        ),
        migrations.AddField(
            model_name='partnership',
            name='ucl_management_entity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='partnership', to='partnership.UCLManagementEntity', verbose_name='ucl_management_entity'),
        ),
        migrations.AddField(
            model_name='partnership',
            name='ucl_university',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='partnerships', to='base.Entity', verbose_name='ucl_university'),
        ),
        migrations.AddField(
            model_name='partnership',
            name='ucl_university_labo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='partnerships_labo', to='base.Entity', verbose_name='ucl_university_labo'),
        ),
        migrations.AddField(
            model_name='partnership',
            name='university_offers',
            field=models.ManyToManyField(blank=True, related_name='partnerships', to='base.EducationGroupYear', verbose_name='university_offers'),
        ),
        migrations.AddField(
            model_name='partner',
            name='partner_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='partners', to='partnership.PartnerType', verbose_name='partner_type'),
        ),
        migrations.AddField(
            model_name='partner',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='partners', to='partnership.PartnerTag', verbose_name='tags'),
        ),
        migrations.AddField(
            model_name='contact',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='partnership.ContactType', verbose_name='contact_type'),
        ),
        migrations.AlterUniqueTogether(
            name='partnershipyear',
            unique_together=set([('partnership', 'academic_year')]),
        ),
    ]
