# Generated by Django 2.2.13 on 2020-07-20 10:38
from django.db import migrations
from django.db.models import Subquery, OuterRef


def forward(apps, schema_editor):
    """ Move address info to EntityVersionAddress """
    EntityVersionAddress = apps.get_model('base', 'EntityVersionAddress')
    EntityVersion = apps.get_model('base', 'EntityVersion')
    Address = apps.get_model('partnership', 'Address')

    # Every address info has at least a city so we will move all
    obj_list = []
    qs = Address.objects.filter(partners__isnull=False).annotate(
        last_entity_version_id=Subquery(EntityVersion.objects.filter(
            entity__organization=OuterRef('partners__organization_id'),
            parent__isnull=True,
        ).order_by('-start_date').values('pk')[:1])
    )
    for address in qs:
        obj_list.append(EntityVersionAddress(
            entity_version_id=address.last_entity_version_id,
            street=address.address,
            postal_code=address.postal_code or '',
            city=address.city,
            country=address.country,
            is_main=True,
        ))
    EntityVersionAddress.objects.bulk_create(obj_list)


def backward(apps, schema_editor):
    """ Recreate back contact addresses """
    EntityVersion = apps.get_model('base', 'EntityVersion')
    Address = apps.get_model('partnership', 'Address')
    Partner = apps.get_model('partnership', 'Partner')

    address_qs = EntityVersion.objects.filter(
        entity__organization=OuterRef('organization'),
        parent__isnull=True,
    ).order_by('-start_date')

    qs = Partner.objects.annotate(
        street=Subquery(address_qs.values('entityversionaddress__street')[:1]),
        postal_code=Subquery(address_qs.values(
            'entityversionaddress__postal_code'
        )[:1]),
        city=Subquery(address_qs.values('entityversionaddress__city')[:1]),
        country_id=Subquery(address_qs.values(
            'entityversionaddress__country_id'
        )[:1]),
    )
    for partner in qs:
        partner.contact_address_id = Address.objects.create(
            address=partner.street,
            postal_code=partner.postal_code,
            city=partner.city,
            country_id=partner.country_id,
        ).pk
    Partner.objects.bulk_update(qs, ['contact_address_id'])


class Migration(migrations.Migration):
    dependencies = [
        ('partnership', '0071_partnerentity_entity_version'),
    ]

    operations = [
        migrations.RunPython(forward, backward),
        migrations.RemoveField(
            model_name='partner',
            name='contact_address',
        ),
        migrations.DeleteModel(
            name='Address',
        ),
    ]
