# Generated by Django 2.2.13 on 2021-05-10 11:19
from django.db import migrations
from django.db.models import Exists, OuterRef, Subquery, IntegerField


def forward(apps, schema_editor):
    EntityVersion = apps.get_model('base', 'EntityVersion')
    EntityVersionAddress = apps.get_model('base', 'EntityVersionAddress')

    # Get all entity versions that don't have an address, but have one on an older version
    address_to_copy = dict(EntityVersion.objects.annotate(
        has_address=Exists(EntityVersionAddress.objects.filter(
            entity_version_id=OuterRef('pk')
        )),
        older_version_address=Subquery(EntityVersion.objects.annotate(
            address_id=Subquery(EntityVersionAddress.objects.filter(
                entity_version_id=OuterRef('pk')
            ).order_by('-pk').values('pk')[:1]),
        ).filter(
            entity_id=OuterRef('entity'),
            address_id__isnull=False,
        ).order_by('-pk').values('address_id')[:1], output_field=IntegerField()),
    ).filter(
        entity__organization__partner__isnull=False,
        parent__isnull=True,
        has_address=False,
        older_version_address__isnull=False,
    ).values_list('pk', 'older_version_address'))

    addresses = EntityVersionAddress.objects.in_bulk(address_to_copy.values())
    address_to_create = []
    for entity_version, address in address_to_copy.items():
        new_address = addresses[address]
        new_address.pk = None
        new_address.entity_version_id = entity_version
        address_to_create.append(new_address)

    EntityVersionAddress.objects.bulk_create(address_to_create)


class Migration(migrations.Migration):
    dependencies = [
        ('partnership', '0091_partnershipviewer'),
    ]

    operations = [
        migrations.RunPython(forward, migrations.RunPython.noop)
    ]
