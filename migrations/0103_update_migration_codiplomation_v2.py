# Generated by Django 4.2.20 on 2025-09-15 13:40
from django.conf import settings
from django.db import migrations
from django.db.models import Prefetch, Min
from collections import defaultdict
from partnership.models.enums.partnership import PartnershipProductionSupplement, PartnershipType, \
    PartnershipFlowDirection, PartnershipDiplomaWithUCL


def update_migration_data_codiplomation(apps, schema_editor):
    """
        Besoin métier :
        - Pour TRSF2MC qu'on a déjà migré : enlever UCLouvain de référent et aller chercher le nouveau référent dans les anciennes tables.
        - Pour MOBI2MC, ARTD2M5, ECOI2M5 qui ont été créé récemment dans les anciennes tables (et donc qui ne sont pas encore migrés) il faut les migrer entièrement comme on a fait pour les autres
    """
    if settings.TESTING:
        return
    AcademicYear = apps.get_model('base', 'AcademicYear')
    EducationGroupYear = apps.get_model("base", "EducationGroupYear")
    EducationGroupOrganization = apps.get_model("base", "EducationGroupOrganization")
    Entity = apps.get_model("base", "Entity")
    Partnership = apps.get_model("partnership", "Partnership")
    PartnershipPartnerRelation = apps.get_model("partnership", "PartnershipPartnerRelation")
    PartnershipPartnerRelationYear = apps.get_model("partnership", "PartnershipPartnerRelationYear")
    PartnershipYear = apps.get_model("partnership", "PartnershipYear")
    PartnershipMission = apps.get_model("partnership", "PartnershipMission")
    PartnershipSubtype = apps.get_model("partnership", "PartnershipSubtype")
    PartnershipYearEducationLevel = apps.get_model("partnership", "PartnershipYearEducationLevel")
    PartnershipYearOffers = apps.get_model("partnership", "PartnershipYearOffers")


    # UPDATE TRSF2MC
    educationgroup = EducationGroupYear.objects.filter(acronym='TRSF2MC').first()
    entity = Entity.objects.filter(organization__acronym='ULB').first()

    if educationgroup and entity:
        for year in range(2025, 2038) :
            academic_year = AcademicYear.objects.filter(year=year).first()
            partnership_id = Partnership.objects.filter(
                years__academic_year=academic_year,
                years__partnership_year__educationgroup=educationgroup.education_group_id,
                ).first().id

            relation = PartnershipPartnerRelation.objects.filter(entity_id=entity.id, partnership_id=partnership_id).first()

            updated_rel = (
                PartnershipPartnerRelationYear.objects
                .filter(partnership_relation=relation, academic_year=academic_year)
                .update(partner_referent=True)
            )
            if updated_rel:
                print(f" Partner referent mis à jour pour {year}")

            updated_partnership_year = (
                PartnershipYear.objects
                .filter(partnership=partnership_id, academic_year=academic_year)
                .update(ucl_reference=False)
            )
            if updated_partnership_year:
                print(f" UCL referent mis à jour pour {year}")

    # ADD MOBI2MC, ARTD2M5, ECOI2M5
    all_education_group_organization = EducationGroupOrganization.objects.filter(education_group_year__acronym__in=('MOBI2MC', 'ARTD2M5', 'ECOI2M5')).prefetch_related(
        'education_group_year__education_group'
    ).order_by(
        'education_group_year__education_group'
    ).values_list('education_group_year__education_group', flat=True)

    all_ego_set = set(all_education_group_organization)

    # Creation one partnership
    mission = PartnershipMission.objects.filter(code="ENS").first()
    subtype = PartnershipSubtype.objects.filter(code="ORG_WITH").first()

    for item_ego in all_ego_set:
        codiplomations_by_eg = EducationGroupOrganization.objects.filter(education_group_year__acronym__in=('MOBI2MC', 'ARTD2M5', 'ECOI2M5')).prefetch_related(
            'education_group_year__education_group'
        ).order_by(
            'education_group_year__education_group'
        ).filter(education_group_year__education_group=item_ego)

        test_date_fin = codiplomations_by_eg.first().education_group_year.education_group.end_year
        if test_date_fin:
            end_date = test_date_fin.end_date
            end = {'max_acad': test_date_fin.year}
        else:
            end = {'max_acad': 2037}
            end_date = AcademicYear.objects.get(year=end['max_acad']).end_date

        start = codiplomations_by_eg.aggregate(min_acad=Min('education_group_year__academic_year__year'))
        start_date = AcademicYear.objects.get(year=start['min_acad']).start_date

        newer_partnership = codiplomations_by_eg.order_by('-education_group_year__academic_year').first()
        # tri descend

        partnership = Partnership(
            comment='',
            project_acronym=f'NEW{codiplomations_by_eg[0].education_group_year_id}',
            ucl_entity_id=newer_partnership.education_group_year.management_entity_id,
            supervisor_id=None,
            author_id=None,
            partnership_type=PartnershipType.COURSE.name,
            end_date=end_date,
            start_date=start_date,
            is_public=True,
            description='',
            subtype=subtype
        )
        partnership.save()
        partnership.missions.add(mission)

        # id of entity partner to create the partner relationship
        referents = defaultdict(list)
        all_id_entities_coorganization = codiplomations_by_eg.values_list('organization', flat=True).distinct()
        for partner_id in all_id_entities_coorganization:
            entity_obj = Entity.objects.filter(organization_id=partner_id).first()
            relation = PartnershipPartnerRelation(
                partnership=partnership,
                entity=entity_obj
            )
            relation.save()

            # Creation of the relationship year
            partner_years = codiplomations_by_eg.filter(organization=partner_id).order_by(
                'education_group_year__academic_year'
            )
            for partner_year in partner_years:
                supplement = PartnershipProductionSupplement.YES.name if partner_year.is_producing_annexe \
                    else PartnershipProductionSupplement.NO.name
                type_diploma = PartnershipDiplomaWithUCL.UNIQUE.name \
                    if partner_year.diploma == PartnershipDiplomaWithUCL.UNIQUE.name \
                    else PartnershipDiplomaWithUCL.NO_CODIPLOMA.name
                year = partner_year.education_group_year.academic_year.year
                referents[year].append(partner_year.enrollment_place)

                relation_year = PartnershipPartnerRelationYear(
                    partnership_relation=relation,
                    academic_year=partner_year.education_group_year.academic_year,
                    type_diploma_by_partner=type_diploma,
                    diploma_prod_by_partner=partner_year.is_producing_cerfificate,
                    supplement_prod_by_partner=supplement,
                    partner_referent=partner_year.enrollment_place,
                    all_student=partner_year.all_students
                )
                relation_year.save()

        type_ba = PartnershipYearEducationLevel.objects.filter(code='ISCED-6').first()
        type_master = PartnershipYearEducationLevel.objects.filter(code='ISCED-7').first()
        type_doct = PartnershipYearEducationLevel.objects.filter(code='ISCED-8').first()

        dict_training = {
            1: type_ba,
            2: type_master,
            3: type_doct,
        }
        for i in range(start['min_acad'], end['max_acad'] + 1):
            value_referent_year = referents.get(i)
            if value_referent_year:
                # if no partner is referent uclouvain is referent
                ucl_referent = False if True in value_referent_year else True
            else:
                ucl_referent = True

            partnership_year = PartnershipYear(
                academic_year=AcademicYear.objects.get(year=i),
                partnership=partnership,
                funding_type=None,
                funding_program=None,
                funding_source=None,
                flow_direction=PartnershipFlowDirection.IN.name,
                ucl_reference=ucl_referent,
                all_student=True,
                diploma_prod_by_ucl=partner_year.is_producing_cerfificate,
                supplement_prod_by_ucl=PartnershipProductionSupplement.YES.name if partner_year.is_producing_annexe \
                    else PartnershipProductionSupplement.NO.name,
                type_diploma_by_ucl=PartnershipDiplomaWithUCL.UNIQUE.name
            )
            partnership_year.save()

            partnership_year.education_fields.add(
                partner_year.education_group_year.isced_domain
            )  # reference_DomainIsced  <- base.EducationGroupYear:isced_domain_id
            partnership_year.education_levels.add(
                dict_training.get(partner_year.education_group_year.education_group_type.cycle)
            )
            partnership_year.entities.add(newer_partnership.education_group_year.management_entity_id)
            offer = PartnershipYearOffers(
                partnershipyear=partnership_year,
                educationgroup_id=partner_year.education_group_year.education_group.id,
                educationgroupyear=partner_year.education_group_year,
            )
            offer.save()


class Migration(migrations.Migration):

    dependencies = [
        ('partnership', '0102_remove_partnershipyearoffers_external_id_and_more'),
    ]

    operations = [
        migrations.RunPython(code=update_migration_data_codiplomation),
    ]
