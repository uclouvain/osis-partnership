# Generated by Django 2.2.13 on 2021-06-11 11:44

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    replaces = [('partnership', '0001_initial'), ('partnership', '0002_auto_20180608_1038'), ('partnership', '0003_auto_20180625_1009'), ('partnership', '0004_auto_20180628_0916'), ('partnership', '0005_remove_partnership_is_signed'), ('partnership', '0006_auto_20180703_1205'), ('partnership', '0007_auto_20180703_1550'), ('partnership', '0008_auto_20180703_1641'), ('partnership', '0009_auto_20180704_1058'), ('partnership', '0010_auto_20180704_1727'), ('partnership', '0011_auto_20180705_1231'), ('partnership', '0012_auto_20180705_1625'), ('partnership', '0013_auto_20180705_1631'), ('partnership', '0014_auto_20180706_1658'), ('partnership', '0015_auto_20180710_1050'), ('partnership', '0016_remove_partnership_is_valid'), ('partnership', '0017_remove_partnership_end_date'), ('partnership', '0018_auto_20180711_1045'), ('partnership', '0019_auto_20180711_1140'), ('partnership', '0020_partnership_supervisor'), ('partnership', '0021_auto_20180716_1059'), ('partnership', '0022_auto_20180717_1504'), ('partnership', '0023_partnershipconfiguration'), ('partnership', '0024_auto_20180719_1641'), ('partnership', '0025_auto_20180725_1626'), ('partnership', '0026_auto_20180726_1129'), ('partnership', '0027_auto_20180731_1601'), ('partnership', '0028_auto_20180803_1130'), ('partnership', '0029_auto_20180925_1617'), ('partnership', '0030_auto_20181003_1139'), ('partnership', '0031_auto_20181004_0936'), ('partnership', '0029_auto_20181005_1835'), ('partnership', '0032_merge_20181005_2044'), ('partnership', '0033_auto_20181017_1018'), ('partnership', '0034_partnershipconfiguration_email_notification_to'), ('partnership', '0035_auto_20181113_1013'), ('partnership', '0036_auto_20181029_1008'), ('partnership', '0037_auto_20181106_1040'), ('partnership', '0038_auto_20181207_1157'), ('partnership', '0039_auto_20190404_1713'), ('partnership', '0040_auto_20190409_1148'), ('partnership', '0041_partnership_uuid'), ('partnership', '0042_partnership_medias'), ('partnership', '0043_auto_20190523_1037'), ('partnership', '0044_auto_20190524_1607'), ('partnership', '0045_auto_20200129_1327'), ('partnership', '0046_auto_20200218_1026'), ('partnership', '0047_nullable_authors'), ('partnership', '0048_person_as_authors'), ('partnership', '0049_enums'), ('partnership', '0050_configuration_academic_year'), ('partnership', '0051_remove_faculty'), ('partnership', '0052_remove_ucl_university'), ('partnership', '0053_domain_isced_migration'), ('partnership', '0054_move_partnership_type'), ('partnership', '0055_osis_role'), ('partnership', '0056_media_url_maxlength'), ('partnership', '0057_fundings'), ('partnership', '0058_start_end_dates'), ('partnership', '0059_subtype_mission'), ('partnership', '0060_agreement_dates'), ('partnership', '0061_partnershipyear_cascade'), ('partnership', '0062_partnership_is_public'), ('partnership', '0063_sync_dates_years'), ('partnership', '0064_create_default_mission_subtypes'), ('partnership', '0065_sync_dates_years_agreements'), ('partnership', '0066_add_partner_organization'), ('partnership', '0067_migrate_partner_organization'), ('partnership', '0068_remove_partner_fields'), ('partnership', '0069_funding_hierarchy_year'), ('partnership', '0070_help_texts'), ('partnership', '0071_partnerentity_entity_version'), ('partnership', '0072_contact_address'), ('partnership', '0073_subtype_order'), ('partnership', '0074_performance'), ('partnership', '0075_partner_entity_ref'), ('partnership', '0076_auto_20200925_1037'), ('partnership', '0077_partner_entity_entity'), ('partnership', '0078_auto_20201205_1453'), ('partnership', '0079_add_non_yearly_fields'), ('partnership', '0080_migrate_yearly_fields'), ('partnership', '0081_remove_yearly_fields'), ('partnership', '0082_funding_is_active'), ('partnership', '0083_auto_20210111_1433'), ('partnership', '0084_acronyms'), ('partnership', '0085_drop_partner_relation'), ('partnership', '0086_fix_end_dates'), ('partnership', '0087_entity_proxy'), ('partnership', '0088_partnership_partner_relation'), ('partnership', '0089_increase_acronym'), ('partnership', '0090_remove_partner_is_ies'), ('partnership', '0091_partnershipviewer'), ('partnership', '0092_copy_partner_address_to_new_version')]

    initial = True

    dependencies = [
        ('base', '0506_remove_prerequisites_whithout_item'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('base', '0366_auto_20181010_1627'),
        ('base', '0283_learningunityear_existing_proposal_in_epc'),
        ('base', '0383_organizationaddress_is_main'),
        ('base', '0295_auto_20180627_1417'),
        ('base', '0312_educationgroupyear_languages'),
        ('base', '0376_auto_20181022_1510'),
        ('base', '0364_auto_20181005_1215'),
        ('base', '0540_prevent_empty_address'),
        ('base', '0572_auto_20210309_1616'),
        ('base', '0583_auto_20210324_0954'),
        ('base', '0535_auto_20200908_1239'),
        ('reference', '0017_language_changed'),
        ('base', '0358_auto_20180921_1059'),
        ('osis_common', '0014_messagequeuecache'),
        ('base', '0513_auto_20200424_1417'),
        ('base', '0512_cte_manager'),
        ('reference', '0004_domainisced_is_ares'),
        ('base', '0505_update_summary_submission_calendars'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ('value',),
            },
        ),
        migrations.CreateModel(
            name='PartnershipTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ('value',),
            },
        ),
        migrations.CreateModel(
            name='PartnerTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ('value',),
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, choices=[('MISTER', 'mister'), ('MADAM', 'madame')], max_length=50, null=True, verbose_name='contact_title')),
                ('last_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='last_name')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='first_name')),
                ('society', models.CharField(blank=True, max_length=255, null=True, verbose_name='society')),
                ('function', models.CharField(blank=True, max_length=255, null=True, verbose_name='function')),
                ('phone', models.CharField(blank=True, max_length=255, null=True, verbose_name='phone')),
                ('mobile_phone', models.CharField(blank=True, max_length=255, null=True, verbose_name='mobile_phone')),
                ('fax', models.CharField(blank=True, max_length=255, null=True, verbose_name='fax')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email')),
                ('comment', models.TextField(blank=True, default='', verbose_name='comment')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='partnership.ContactType', verbose_name='contact_type')),
            ],
        ),
        migrations.CreateModel(
            name='PartnershipYearEducationLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=30, unique=True)),
                ('label', models.CharField(max_length=255)),
                ('education_group_types', models.ManyToManyField(related_name='partnership_education_levels', to='base.EducationGroupType', verbose_name='education_group_types')),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='MediaType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=250, verbose_name='code')),
                ('label', models.CharField(max_length=250, verbose_name='label')),
            ],
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('url', models.URLField(blank=True, help_text='media_file_or_url', max_length=1000, null=True, verbose_name='url')),
                ('visibility', models.CharField(choices=[('PUBLIC', 'visibility_public'), ('STAFF', 'visibility_staff'), ('STAFF_STUDENT', 'visibility_staff_student')], max_length=50, verbose_name='visibility')),
                ('file', models.FileField(blank=True, help_text='media_file_or_url', null=True, upload_to='partnerships/', verbose_name='file')),
                ('is_visible_in_portal', models.BooleanField(blank=True, default=True, verbose_name='is_visible_in_portal')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='partnership.MediaType', verbose_name='type')),
                ('author', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='base.Person', verbose_name='author')),
            ],
        ),
        migrations.CreateModel(
            name='FundingProgram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='funding_program')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='FundingSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='funding_source')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'funding_source',
            },
        ),
        migrations.CreateModel(
            name='FundingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='funding_type')),
                ('url', models.URLField(blank=True, verbose_name='url')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='partnership.FundingProgram', verbose_name='funding_program')),
                ('is_active', models.BooleanField(default=True, verbose_name='is_active')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'funding_type',
            },
        ),
        migrations.AddField(
            model_name='fundingprogram',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='partnership.FundingSource', verbose_name='funding_source'),
        ),
        migrations.CreateModel(
            name='PartnershipMission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=100, unique=True)),
                ('types', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('GENERAL', 'Accord général de collaboration'), ('MOBILITY', 'Partenariat de mobilité'), ('COURSE', 'Partenariat de co-organisation de formation'), ('DOCTORATE', 'Partenariat de co-organisation de doctorat'), ('PROJECT', 'Projet financé')], max_length=50), size=None)),
            ],
            options={
                'verbose_name': 'partnership_mission',
            },
        ),
        migrations.CreateModel(
            name='PartnershipSubtype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=100, unique=True)),
                ('types', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('GENERAL', 'Accord général de collaboration'), ('MOBILITY', 'Partenariat de mobilité'), ('COURSE', 'Partenariat de co-organisation de formation'), ('DOCTORATE', 'Partenariat de co-organisation de doctorat'), ('PROJECT', 'Projet financé')], max_length=50), size=None)),
                ('is_active', models.BooleanField(default=True, verbose_name='is_active')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False)),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'partnership_subtype',
            },
        ),
        migrations.AlterModelOptions(
            name='fundingprogram',
            options={'ordering': ('name',), 'verbose_name': 'funding_program'},
        ),
        migrations.CreateModel(
            name='Partnership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(blank=True, default='', help_text='invisible_on_api', verbose_name='comment')),
                ('created', models.DateField(auto_now_add=True, verbose_name='created')),
                ('modified', models.DateField(auto_now=True, verbose_name='modified')),
                ('contacts', models.ManyToManyField(blank=True, related_name='_partnership_contacts_+', to='partnership.Contact', verbose_name='contacts')),
                ('tags', models.ManyToManyField(blank=True, related_name='partnerships', to='partnership.PartnershipTag', verbose_name='tags')),
                ('ucl_entity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='partnerships', to='base.Entity', verbose_name='ucl_entity')),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='partnerships_supervisor', to='base.Person', verbose_name='partnership_supervisor')),
                ('external_id', models.CharField(blank=True, editable=False, help_text='to_synchronize_with_epc', max_length=255, null=True, unique=True, verbose_name='external_id')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('medias', models.ManyToManyField(blank=True, related_name='_partnership_medias_+', to='partnership.Media', verbose_name='medias')),
                ('author', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='base.Person', verbose_name='author')),
                ('partnership_type', models.CharField(choices=[('GENERAL', 'Accord général de collaboration'), ('MOBILITY', 'Partenariat de mobilité'), ('COURSE', 'Partenariat de co-organisation de formation'), ('DOCTORATE', 'Partenariat de co-organisation de doctorat'), ('PROJECT', 'Projet financé')], db_index=True, max_length=255, verbose_name='partnership_type')),
                ('end_date', models.DateField(null=True, verbose_name='end_date')),
                ('start_date', models.DateField(null=True, verbose_name='start_date')),
                ('is_public', models.BooleanField(default=True, help_text='partnership_is_public_help_text', verbose_name='partnership_is_public')),
                ('partner_entity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='partner_of', to='base.Entity', verbose_name='partner_entity')),
                ('description', models.TextField(blank=True, default='', help_text='visible_on_api', verbose_name='partnership_year_description')),
                ('id_number', models.CharField(default='', max_length=200, verbose_name='partnership_year_id_number')),
                ('missions', models.ManyToManyField(to='partnership.PartnershipMission', verbose_name='partnership_missions')),
                ('project_title', models.CharField(default='', max_length=200, verbose_name='partnership_year_project_title')),
                ('subtype', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='years', to='partnership.PartnershipSubtype', verbose_name='partnership_subtype')),
                ('ucl_status', models.CharField(choices=[('coordinator', 'Coordinator'), ('partner', 'Partner')], default='', max_length=20, verbose_name='partnership_year_ucl_status')),
            ],
            options={
                'ordering': ('-created',),
                'permissions': (('can_access_partnerships', 'can_access_partnerships'),),
            },
        ),
        migrations.CreateModel(
            name='PartnershipYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='base.AcademicYear', verbose_name='academic_year')),
                ('partnership', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='years', to='partnership.Partnership', verbose_name='partnership')),
                ('is_smp', models.BooleanField(blank=True, default=False, verbose_name='is_smp')),
                ('is_sms', models.BooleanField(blank=True, default=False, verbose_name='is_sms')),
                ('is_sta', models.BooleanField(blank=True, default=False, verbose_name='is_sta')),
                ('is_stt', models.BooleanField(blank=True, default=False, verbose_name='is_stt')),
                ('entities', models.ManyToManyField(blank=True, help_text='partnership_year_entities_help_text', related_name='partnerships_years', to='base.Entity', verbose_name='partnership_year_entities')),
                ('offers', models.ManyToManyField(blank=True, help_text='partnership_year_offers_help_text', related_name='partnerships', to='base.EducationGroupYear', verbose_name='partnership_year_offers')),
                ('education_levels', models.ManyToManyField(blank=True, related_name='partnerships_years', to='partnership.PartnershipYearEducationLevel', verbose_name='partnership_year_education_levels')),
                ('eligible', models.BooleanField(blank=True, default=True, verbose_name='eligible')),
                ('is_smst', models.BooleanField(blank=True, default=False, verbose_name='is_smst')),
                ('education_fields', models.ManyToManyField(to='reference.DomainIsced', verbose_name='partnership_year_education_fields')),
                ('funding_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='years', to='partnership.FundingType', verbose_name='funding_type')),
                ('funding_program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='years', to='partnership.FundingProgram', verbose_name='funding_program')),
                ('funding_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='years', to='partnership.FundingSource', verbose_name='funding_source')),
            ],
            options={
                'ordering': ('academic_year__year',),
                'verbose_name': 'partnership_year',
                'unique_together': {('partnership', 'academic_year')},
            },
        ),
        migrations.AddField(
            model_name='fundingprogram',
            name='is_active',
            field=models.BooleanField(default=True, verbose_name='is_active'),
        ),
        migrations.CreateModel(
            name='Financing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.AcademicYear', verbose_name='academic_year')),
                ('countries', models.ManyToManyField(to='reference.Country', verbose_name='countries')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='partnership.FundingType', verbose_name='funding_type')),
            ],
            options={
                'ordering': ('academic_year__year',),
                'unique_together': {('type', 'academic_year')},
            },
        ),
        migrations.CreateModel(
            name='PartnershipAgreement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('WAITING', 'status_waiting'), ('VALIDATED', 'status_validated'), ('REFUSED', 'status_refused')], default='WAITING', max_length=10, verbose_name='status')),
                ('end_academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='partnership_agreements_end', to='base.AcademicYear', verbose_name='end_academic_year')),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='partnership.Media', verbose_name='media')),
                ('partnership', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='agreements', to='partnership.Partnership', verbose_name='partnership')),
                ('start_academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='base.AcademicYear', verbose_name='start_academic_year')),
                ('comment', models.TextField(blank=True, default='', verbose_name='comment')),
                ('changed', models.DateField(auto_now=True, verbose_name='changed')),
                ('external_id', models.CharField(blank=True, editable=False, help_text='to_synchronize_with_epc', max_length=255, null=True, unique=True, verbose_name='external_id')),
                ('end_date', models.DateField(null=True, verbose_name='end_date')),
                ('start_date', models.DateField(null=True, verbose_name='start_date')),
            ],
            options={
                'ordering': ['-start_academic_year__start_date'],
                'verbose_name': 'financing',
                'permissions': (('can_access_partnerships_agreements', 'can_access_partnerships_agreements'),),
            },
        ),
        migrations.CreateModel(
            name='PartnershipConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notification_to', models.EmailField(default='programmes.mobilite@uclouvain.be', max_length=254, verbose_name='partnership_email_notification_to')),
                ('partnership_api_year', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='base.AcademicYear', verbose_name='partnership_api_year')),
                ('partnership_creation_update_min_year', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='base.AcademicYear', verbose_name='partnership_creation_update_min_year')),
            ],
        ),
        migrations.CreateModel(
            name='UCLManagementEntity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_in_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email')),
                ('contact_in_url', models.URLField(blank=True, null=True, verbose_name='portal')),
                ('contact_out_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email')),
                ('contact_out_url', models.URLField(blank=True, null=True, verbose_name='portal')),
                ('academic_responsible', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='management_entities', to='base.Person', verbose_name='academic_responsible')),
                ('administrative_responsible', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Person', verbose_name='administrative_responsible')),
                ('contact_in_person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Person', verbose_name='contact_in_name')),
                ('contact_out_person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Person', verbose_name='contact_out_name')),
                ('entity', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='uclmanagement_entity', to='base.Entity', verbose_name='entity')),
                ('course_catalogue_text_en', models.TextField(blank=True, default='', verbose_name='course_catalogue_text_en')),
                ('course_catalogue_text_fr', models.TextField(blank=True, default='', verbose_name='course_catalogue_text_fr')),
                ('course_catalogue_url_en', models.URLField(blank=True, default='', verbose_name='course_catalogue_url_en')),
                ('course_catalogue_url_fr', models.URLField(blank=True, default='', verbose_name='course_catalogue_url_fr')),
            ],
        ),
        migrations.CreateModel(
            name='EntityProxy',
            fields=[
            ],
            options={
                'indexes': [],
                'constraints': [],
                'proxy': True,
            },
            bases=('base.entity',),
        ),
        migrations.CreateModel(
            name='PartnershipPartnerRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='partner_of', to='base.Entity')),
                ('partnership', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='partnership.Partnership')),
            ],
            options={
                'unique_together': {('partnership', 'entity')},
            },
        ),
        migrations.AddField(
            model_name='partnership',
            name='partner_entities',
            field=models.ManyToManyField(through='partnership.PartnershipPartnerRelation', to='base.Entity', verbose_name='partner_entities'),
        ),
        migrations.CreateModel(
            name='PartnershipEntityManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Entity')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Person')),
                ('with_child', models.BooleanField(default=False)),
                ('scopes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('GENERAL', 'Accord général de collaboration'), ('MOBILITY', 'Partenariat de mobilité'), ('COURSE', 'Partenariat de co-organisation de formation'), ('DOCTORATE', 'Partenariat de co-organisation de doctorat'), ('PROJECT', 'Projet financé')], max_length=200), blank=True, default=['MOBILITY'], size=None)),
            ],
            options={
                'verbose_name': 'Partnership manager',
                'verbose_name_plural': 'Partnership managers',
            },
        ),
        migrations.RemoveField(
            model_name='partnership',
            name='partner_entity',
        ),
        migrations.AlterModelOptions(
            name='partnership',
            options={'base_manager_name': 'objects', 'ordering': ('-created',), 'permissions': (('can_access_partnerships', 'can_access_partnerships'),)},
        ),
        migrations.AddField(
            model_name='partnership',
            name='project_acronym',
            field=models.CharField(blank=True, default='', max_length=255, verbose_name='partnership_project_acronym'),
        ),
        migrations.CreateModel(
            name='PartnershipViewer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Person')),
            ],
            options={
                'verbose_name': 'Partnership viewer',
                'verbose_name_plural': 'Partnership viewers',
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_valid', models.BooleanField(default=False, verbose_name='is_valid')),
                ('pic_code', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='pic_code')),
                ('erasmus_code', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='erasmus_code')),
                ('email', models.EmailField(blank=True, help_text='mandatory_if_not_pic_ies', max_length=254, null=True, verbose_name='email')),
                ('phone', models.CharField(blank=True, help_text='mandatory_if_not_pic_ies', max_length=255, null=True, verbose_name='phone')),
                ('is_nonprofit', models.NullBooleanField(verbose_name='is_nonprofit')),
                ('is_public', models.NullBooleanField(verbose_name='is_public')),
                ('contact_type', models.CharField(blank=True, choices=[('EPLUS-EDU-HEI', 'Higher education institution (tertiary level)'), ('EPLUS-EDU-GEN-PRE', 'School/Institute/Educational centre – General education (pre-primary level)'), ('EPLUS-EDU-GEN-PRI', 'School/Institute/Educational centre – General education (primary level)'), ('EPLUS-EDU-GEN-SEC', 'School/Institute/Educational centre – General education (secondary level)'), ('EPLUS-EDU-VOC-SEC', 'School/Institute/Educational centre – Vocational Training (secondary level)'), ('EPLUS-EDU-VOC-TER', 'School/Institute/Educational centre – Vocational Training (tertiary level)'), ('EPLUS-EDU-ADULT', 'School/Institute/Educational centre – Adult education'), ('EPLUS-BODY-PUB-NAT', 'National Public body'), ('EPLUS-BODY-PUB-REG', 'Regional Public body'), ('EPLUS-BODY-PUB-LOC', 'Local Public body'), ('EPLUS-ENT-SME', 'Small and medium sized enterprise'), ('EPLUS-ENT-LARGE', 'Large enterprise'), ('EPLUS-NGO', 'Non-governmental organisation/association/social enterprise'), ('EPLUS-FOUND', 'Foundation'), ('EPLUS-SOCIAL', 'Social partner or other representative of working life (chambers of commerce, trade union, trade association)'), ('EPLUS-RES', 'Research Institute/Centre'), ('EPLUS-YOUTH-COUNCIL', 'National Youth Council'), ('EPLUS-ENGO', 'European NGO'), ('EPLUS-NET-EU', 'EU-wide network'), ('EPLUS-YOUTH-GROUP', 'Group of young people active in youth work'), ('EPLUS-EURO-GROUP-COOP', 'European grouping of territorial cooperation'), ('EPLUS-BODY-ACCRED', 'Accreditation, _(certification or qualification body'), ('EPLUS-BODY-CONS', 'Counsellzing body'), ('EPLUS-INTER', 'International organisation under public law'), ('EPLUS-SPORT-PARTIAL', 'Organisation or association representing (parts of) the sport sector'), ('EPLUS-SPORT-FED', 'Sport federation'), ('EPLUS-SPORT-LEAGUE', 'Sport league'), ('EPLUS-SPORT-CLUB', 'Sport club'), ('OTH', 'Other')], help_text='mandatory_if_not_pic_ies', max_length=255, null=True, verbose_name='partner_contact_type')),
                ('use_egracons', models.BooleanField(default=False, verbose_name='use_egracons')),
                ('comment', models.TextField(blank=True, default='', verbose_name='comment')),
                ('created', models.DateField(auto_now_add=True, verbose_name='created')),
                ('changed', models.DateField(auto_now=True, verbose_name='changed')),
                ('medias', models.ManyToManyField(blank=True, related_name='_partner_medias_+', to='partnership.Media', verbose_name='medias')),
                ('now_known_as', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='formely_known_as', to='partnership.Partner', verbose_name='now_known_as')),
                ('tags', models.ManyToManyField(blank=True, related_name='partners', to='partnership.PartnerTag', verbose_name='tags')),
                ('author', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='base.Person', verbose_name='author')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='base.Organization')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
            ],
            options={
                'ordering': ('-created',),
                'permissions': (('can_access_partners', 'can_access_partners'),),
            },
        ),
        migrations.CreateModel(
            name='PartnerEntity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('comment', models.TextField(blank=True, default='', verbose_name='comment')),
                ('created', models.DateField(auto_now_add=True, verbose_name='created')),
                ('modified', models.DateField(auto_now=True, verbose_name='modified')),
                ('contact_in', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='partnership.Contact', verbose_name='contact_in')),
                ('contact_out', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='partnership.Contact', verbose_name='contact_out')),
                ('author', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='base.Person', verbose_name='author')),
                ('entity', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='base.Entity', verbose_name='partner')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
    ]
