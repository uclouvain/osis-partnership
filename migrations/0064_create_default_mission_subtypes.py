# Generated by Django 2.2.10 on 2020-06-22 12:14

from django.db import migrations

from partnership.models import PartnershipType


def forward(apps, schema_editor):
    PartnershipMission = apps.get_model('partnership', 'PartnershipMission')

    # Create the default mission for Mobility, if it does not exist
    ens, _ = PartnershipMission.objects.update_or_create(
        label="Enseignement",
        defaults=dict(
            code='ENS',
            types=[
                PartnershipType.GENERAL.name,
                PartnershipType.MOBILITY.name,
                PartnershipType.COURSE.name,
                PartnershipType.PROJECT.name,
            ],
        )
    )
    # Create this mission for every Partnership Mobility
    PartnershipYear = apps.get_model('partnership', 'PartnershipYear')
    years_pk = PartnershipYear.objects.filter(
        partnership__partnership_type=PartnershipType.MOBILITY.name,
    ).exclude(
        missions=ens,
    ).values_list('pk', flat=True)

    create_list = []
    model = PartnershipYear.missions.rel.through
    for year_pk in years_pk:
        create_list.append(model(
            partnershipyear_id=year_pk,
            partnershipmission_id=ens.pk,
        ))
    model.objects.bulk_create(create_list)

    # Create the other ones
    PartnershipMission.objects.update_or_create(
        label="Recherche",
        defaults=dict(
            code='REC',
            types=[
                PartnershipType.GENERAL.name,
                PartnershipType.DOCTORATE.name,
                PartnershipType.PROJECT.name,
            ],
        )
    )
    PartnershipMission.objects.update_or_create(
        label="Service à la société",
        defaults=dict(
            code='SER',
            types=[
                PartnershipType.GENERAL.name,
                PartnershipType.PROJECT.name,
            ],
        ),
    )
    PartnershipMission.objects.update_or_create(
        label="Administration et logistique",
        defaults=dict(
            code='ADM',
            types=[
                PartnershipType.GENERAL.name,
                PartnershipType.PROJECT.name,
            ],
        ),
    )

    PartnershipSubtype = apps.get_model('partnership', 'PartnershipSubtype')
    PartnershipSubtype.objects.update_or_create(
        label="Memorandum of understanding",
        defaults=dict(
            code='MEM',
            types=[PartnershipType.GENERAL.name],
        ),
    )
    PartnershipSubtype.objects.update_or_create(
        label="Accord-cadre",
        defaults=dict(
            code='CAD',
            types=[PartnershipType.GENERAL.name],
        ),
    )
    PartnershipSubtype.objects.update_or_create(
        label="Accord spécifique",
        defaults=dict(
            code='SPEC',
            types=[PartnershipType.GENERAL.name],
        ),
    )

    PartnershipSubtype.objects.update_or_create(
        label="co-organisation avec co-diplomation",
        defaults=dict(
            code='ORG_WITH',
            types=[PartnershipType.COURSE.name],
        ),
    )
    PartnershipSubtype.objects.update_or_create(
        label="co-organisation sans co-diplomation",
        defaults=dict(
            code='ORG_WITHOUT',
            types=[PartnershipType.COURSE.name],
        ),
    )
    PartnershipSubtype.objects.update_or_create(
        label="autre collaboration de diplomation",
        defaults=dict(
            code='OTHER_DI',
            types=[PartnershipType.COURSE.name],
        ),
    )
    PartnershipSubtype.objects.update_or_create(
        label="emprunt d'activités de formation",
        defaults=dict(
            code='LOAN',
            types=[PartnershipType.COURSE.name],
        ),
    )
    PartnershipSubtype.objects.update_or_create(
        label="autre",
        defaults=dict(
            code='OTHER',
            types=[
                PartnershipType.COURSE.name,
                PartnershipType.DOCTORATE.name,
            ],
        ),
    )

    PartnershipSubtype.objects.update_or_create(
        label="co-tutelle",
        defaults=dict(
            code='COTUT',
            types=[PartnershipType.DOCTORATE.name],
        ),
    )
    PartnershipSubtype.objects.update_or_create(
        label="co-promotion (sans co-diplomation)",
        defaults=dict(
            code='COPRO',
            types=[PartnershipType.DOCTORATE.name],
        ),
    )


class Migration(migrations.Migration):
    dependencies = [
        ('partnership', '0063_sync_dates_years'),
    ]

    operations = [
        migrations.RunPython(forward, migrations.RunPython.noop),
    ]
